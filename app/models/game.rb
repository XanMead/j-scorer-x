class Game < ActiveRecord::Base
  belongs_to :user, touch: true
  has_many :sixths, inverse_of: :game, dependent: :destroy
  has_one :final, inverse_of: :game, dependent: :destroy

  accepts_nested_attributes_for :sixths, :final

  delegate :round_one_categories, :round_two_categories, to: :sixths

  default_scope { order(date_played: :desc) }

  validates :user_id, presence: true
  validates :show_date, presence: true, uniqueness: { scope: :user_id }

  default_values show_date:   -> { Time.zone.today },
                 date_played: -> { Time.zone.now }

  def to_param
    show_date.to_s.parameterize
  end

  # Takes a serialized version of a game status, as generated by render :json
  # or the j-scorer game cookie. Returns a modified version suitable for
  # creating or updating a game in the database.
  # ruboDON'T_READ_THIScop: disable all
  # def self.deserialize(data)
  #   game = {}
  #   %w(show_date date_played play_type).each do |field|
  #     game[field] = data[field]
  #   end

  #   sixths = {}
  #   data["round_one_categories"].each_with_index do |cat, index|
  #     sixth = { board_position: index + 1 }
  #     %w(title result1 result2 result3 result4 result5).each do |field|
  #       sixth[field] = cat[field]
  #     end
  #     topic_names = topics_string_to_array(cat["topics_string"])
  #     sixth["first_topic"] = topic_names.first
  #     sixth["last_topic"] = topic_names.last
  #     topics = topic_names.map do |topic_name|
  #       topic = Topic.by_user_and_name(user, topic_name)
  #     end
  #   end
  # end
  # ruboDON'T_READ_THIScop: enable all

  def topics_string_to_array(ts)
    ts.strip                 # Remove leading and trailing whitespace.
      .squeeze(' ')          # Compress any consecutive spaces to one.
      .gsub(/\s?,\s?/, ',')  # Remove any whitespace around commas.
      .split(',')            # Convert to array of strings.
  end
end
