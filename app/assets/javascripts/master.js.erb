// from accepted answer to stackoverflow.com/questions/4233265/
function placeCaretAtEnd(el) {
  if (typeof window.getSelection != "undefined" &&
      typeof document.createRange != "undefined") {
    var range = document.createRange();
    range.selectNodeContents(el);
    range.collapse(false);
    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  } else if (typeof document.body.createTextRange != "undefined") {
    var textRange = document.body.createTextRange();
    textRange.moveToElementText(el);
    textRange.collapse(false);
    textRange.select();
  }
}

// from accepted answer to stackoverflow.com/questions/12243898/
jQuery.fn.selectText = function(){
  var doc = document;
  var element = this[0];
  // console.log(this, element);
  if (doc.body.createTextRange) {
    var range = document.body.createTextRange();
    range.moveToElementText(element);
    range.select();
  } else if (window.getSelection) {
    var selection = window.getSelection();
    var range = document.createRange();
    range.selectNodeContents(element);
    selection.removeAllRanges();
    selection.addRange(range);
  }
};

function setCookie( name, value ) {
  Cookies.set( name, value, { expires: 7305, path: '',
                              secure: <%= Rails.env.production? %> } );
}

function getCookie( name ) {
  // TODO: Find out why
  // return Cookies.getJSON( name );
  // stopped working properly when the database was hooked up.
  return Cookies.getJSON()[name];
}

function destroyCookie( name ) {
  Cookies.remove( name, { path: '', secure: <%= Rails.env.production? %> } );
}

// const NEW_GAME_COOKIE = {
//   modified: false,
//   showDate: "",
//   activeRound: "round1",
//   round1: [
//     0,
//     // [ [ title, topics ], result codes top to bottom ]
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ]
//   ],
//   round2: [
//     0,
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ],
//     [ [ "", "" ], 0, 0, 0, 0, 0 ]
//   ],
//   // [ [ category_title, topics ], result code, contestants: [ right, wrong ] ]
//   fj: [ [ "", "" ], 0, [ 0, 0 ] ]
// };

const NEW_CATEGORY = {
  "title":"",
  "topics_string":"",
  "result1":0,
  "result2":0,
  "result3":0,
  "result4":0,
  "result5":0
};

function newCategory() {
  return JSON.parse( JSON.stringify( NEW_CATEGORY ) );
}

const NEW_GAME_COOKIE = {
  "show_date":"",
  "date_played":"",
  "play_type":"",
  "round_one_categories":[
    newCategory(),
    newCategory(),
    newCategory(),
    newCategory(),
    newCategory(),
    newCategory()],
  "round_two_categories":[
    newCategory(),
    newCategory(),
    newCategory(),
    newCategory(),
    newCategory(),
    newCategory()],
  "final": {
    "category_title":"",
    "topics_string":"",
    "result":0,
    "contestants_right":0,
    "contestants_wrong":0
  }
};

function newCookie() {
  return JSON.parse( JSON.stringify( NEW_GAME_COOKIE ) );
}

const NEW_DATA_COOKIE = {
  "modified":false,
  "activeRound":"round_one_categories"
};

function newDataCookie() {
  return JSON.parse( JSON.stringify( NEW_DATA_COOKIE ) );
}


$(function() {

  function updateCookies( changed ) {
    if ( changed === undefined ) { changed = true; }

    if ( changed ) { currentGameData["modified"] = true; }
    setCookie( "game", currentGame);
    setCookie( "gameData", currentGameData);
  }

  function updateScoreboard() {
    scoreString = Math.abs( score ).toLocaleString( "en-US" );
    if ( score < 0 ) {
      $scoreboard.html( "-$" + scoreString );
      $scoreboard.toggleClass( "score-positive", false );
      $scoreboard.toggleClass( "score-negative", true );
    } else {
      $scoreboard.html( "$" + scoreString );
      $scoreboard.toggleClass( "score-negative", false );
      $scoreboard.toggleClass( "score-positive", true );
    }
  }

  function updateFinalSymbol() {
    switch ( currentGame["final"]["result"] ) {
      case 0:
        $finalSymbol.html("");
        break;
      case 1:
        $finalSymbol.html( "&nbsp;&#x2718;" );
        break;
      case 3:
        $finalSymbol.html( "&nbsp;&#x2713;" );
        break;
      default:
        $finalSymbol.html( "&nbsp;?" );
        break;
    }
  }

  function showOverlay( event ) {
    vanishPoint = [ event.offsetY + event.target.offsetTop,
                    event.offsetX + event.target.offsetLeft ];

    $clue.show( "scale", { origin: vanishPoint }, 200 );
    $clue.css( "display", "flex" );

    var titleClass = "#cat-title-" + $currentClue.data( "column" ) + " p";
    var catName = $( titleClass ).html().replace( /<div>/gi, " " )
                                        .replace( /<\/div>/gi, "" )
                                        .trim();
    if ( catName.length > 20 ) {
      catName = catName.slice( 0, 15 ) + "...";
    }
    $overlayCat.html( catName );
    $overlayValue.html( "$" + clueValue);

    $ddCheckbox.prop( "checked", $currentClue.data( "isdd" ) );
  }

  function hideOverlay() {
    $clue.hide( "scale", { origin: vanishPoint }, 200 );
  }

  function setTopRowValue( round ) {
    if ( round === 1 || round === "round_one_categories" ) {
      topRowValue = 200;
    } else if ( round === 2 || round === "round_two_categories" ) {
      topRowValue = 400;
    } else {
      console.log( "Error: could not set top row value for round '" +
          round + "'" );
      topRowValue = 0;
    }
  }

  function setClueValue() {
    clueValue = topRowValue * $currentClue.data( "row" );
  }

  function resolveClue( html, boxstate, boxActive, statusCode, addDD ) {
    hideOverlay();
    updateScoreboard();
    $currentClue.html( "<span>" + html + "</span>" );
    var col = $currentClue.data( "column" );
    var row = $currentClue.data( "row" );
    currentClueState = currentGame[currentRound][col - 1]["result" + row]
    $currentClue.data( "boxstate", boxstate );
    $currentClue.toggleClass( "active-clue-box", boxActive );
    setDD( ddCheckboxState() );
    if ( addDD && ddCheckboxState() ) { statusCode += 4; }
    currentGame[currentRound][col - 1]["result" + row] = statusCode;
    updateCookies( currentClueState !== statusCode );
  }

  function setDD( bool ) {
    $currentClue.toggleClass( "dd-box", bool );
    $currentClue.data( "isdd", bool );
  }

  function ddCheckboxState() {
    return $ddCheckbox.prop( "checked" );
  }

//   function setCookieFromForm() {
//     var gameDataArray = $( "#game-container form" ).serializeArray();
//
//     // Convert array to object.
//     var d = {};
//     for (var k = 0; k < gameDataArray.length; k++) {
//       d[gameDataArray[k].name] = gameDataArray[k].value;
//     }
//
//     currentGame["modified"] = false;
//     currentGame["showDate"] = d["game[show_date]"];
//     currentGame["activeRound"] = "round1";
//
//     const gsa = "game[sixths_attributes][";
//     for (var i = 0; i < 6; i++) {
//       currentGame["round1"][i+1][0][0] = d[gsa + i + "][title]"];
//       currentGame["round1"][i+1][0][1] = "Topic number " + String(i);
//       currentGame["round2"][i+1][0][0] = d[gsa + (i+6) + "][title]"];
//       currentGame["round2"][i+1][0][1] = "DJ Topic " + String(i);
//
//       for (var j = 1; j <= 5; j++) {
//         currentGame["round1"][i+1][j] =
//           parseInt(d[gsa + i + "][result" + j + "]"]);
//         currentGame["round2"][i+1][j] =
//           parseInt(d[gsa + (i+6) + "][result" + j + "]"]);
//       }
//     }
//     const gfa = "game[final_attributes][";
//     currentGame["fj"][0][0] = d[gfa + "category_title]"];
//     currentGame["fj"][0][1] = "Final Topics!";
//     currentGame["fj"][1] = parseInt(d[gfa + "result]"]);
//
//     currentGame["fj"][2][0] = parseInt(d[gfa + "contestants_right]"]);
//     currentGame["fj"][2][1] = parseInt(d[gfa + "contestants_wrong]"]);
//
//     setCookie( "game", currentGame);
//   }

  function getScoreFromCookie() {
    score = 0;
    var rounds = [ "round_one_categories", "round_two_categories" ];
    for ( var i = 0; i < 2; i++ ) {
      var roundArray = currentGame[rounds[i]];
      setTopRowValue( i + 1 );

      for ( var cat = 0; cat < 6; cat++ ) {
        for ( var row = 1; row <= 5; row++ ) {
          // $currentClue = $( "#clue-box-" + col + "-" + row );
          // setClueValue();
          clueValue = topRowValue * row;
          switch ( roundArray[cat]["result" + row] ) {
            case 1:  // regular clue wrong - DDs don't deduct.
              score -= clueValue;
              break;
            case 3:  // right
            case 7:  // DDright
              score += clueValue;
              break;
            // None of the others changes the score.
          }
        }
      }
    }
    updateScoreboard();
  }

  function populateBoard() {
    var unadjustedScore = score;
    currentRound = currentGameData["activeRound"];
    console.log( "currentRound = " + currentRound );

    if ( currentRound === "round_one_categories" ||
         currentRound === "round_two_categories" ) {
      setTopRowValue( currentRound );
      var roundArray = currentGame[currentRound];

      for ( var col = 1; col <= 6; col++ ) {
        var catTitleText = roundArray[col - 1]["title"];
        var $catTitleP = $( "#cat-title-" + col + " p" );
        $catTitleP.html( catTitleText );
        // Applies appropriate formatting.
        oldValue = catTitleText;
        $catTitleP.blur();

        $( "#topic-area-" + col ).val( roundArray[col - 1]["topics_string"] );

        for ( var row = 1; row <= 5; row++ ) {
          $currentClue = $( "#clue-box-" + col + "-" + row );
          setClueValue();

          var boxStatus = roundArray[col - 1]["result" + row];
          scoreWithoutClue = unadjustedScore;

          if ( boxStatus < 0 || boxStatus > 7 ) {
            alert( "Error reading game - invalid box status" );
            score = -99999;
            $scoreboard.html( "error" );
            return false;
          }
          if ( boxStatus > 4 ) {
            $ddCheckbox.prop( "checked", true );
            boxStatus -= 4;  // Change DD status to its regular counterpart.
          } else {
            $ddCheckbox.prop( "checked", false );
          }
          switch ( boxStatus ) {
            case 0:  // active
              $resetLink.trigger( "click" );
              break;
            case 1:  // wrong
              $buttonWrong.trigger( "click" );
              break;
            case 2:  // pass
              $buttonPass.trigger( "click" );
              break;
            case 3:  // right
              $buttonRight.trigger( "click" );
              break;
            default:  // nr
              $buttonNR.trigger( "click" );
              break;
          }
        }
      }
    } else {  // Final is current round.
      var catTitleText = currentGame["final"]["category_title"];
      var $catTitleP = $( "#final-cat-title p" )
      $catTitleP.html( catTitleText );
      oldValue = catTitleText;
      $catTitleP.blur();

      $( "#final-topic-area" ).val( currentGame["final"]["topics_string"] );
      $contestantsRight.val( currentGame["final"]["contestants_right"] );
      $contestantsWrong.val( currentGame["final"]["contestants_wrong"] );

      $fj.show();
    }
    score = unadjustedScore;
    updateScoreboard();
    updateFinalSymbol();
  }

  function updateRound() {
    currentRound = currentGameData["activeRound"];
    setCookie( "game", currentGame );
    setCookie( "gameData", currentGameData );
    getScoreFromCookie();
    populateBoard();
    if ( currentRound === "final" ) {
      $fj.show( "scale", 200, function() {
        $board.css( 'visibility', 'hidden' );
        $( "#final-cat-title" ).trigger( "click" );
      });
      $fj.css( 'display', 'flex' );

    } else {
      $fj.hide( "scale", 200 );
      $board.css( 'visibility', 'visible');
      $( "#cat-title-1" ).trigger( "click" );
    }
  }


  var score = 0;
  var $scoreboard = $( "#game-container #score" );
  var $finalSymbol = $( "#game-container #final-symbol" );

  var currentGame = getCookie( "game" );
  var currentRound;

  var $board = $( "#game-container #board" );

  var $clue = $( "#game-container #clue-over-board" );
  var vanishPoint;  // Where overlay comes from/goes to.

  var $fj = $( "#game-container #final-over-board" );
  var $buttonFJRight = $( "#game-container #button-final-right" );
  var $buttonFJWrong = $( "#game-container #button-final-wrong" );
  var $contestantsRight = $( "#game-container #final-right-number" );
  var $contestantsWrong = $( "#game-container #final-wrong-number" );

  var topRowValue;
  var $currentClue;
  var currentClueState;
  var clueValue;
  var scoreWithoutClue;

  var $buttonRight = $( "#game-container #button-right" );
  var $buttonPass = $( "#game-container #button-pass" );
  var $buttonWrong = $( "#game-container #button-wrong" );
  var $buttonNR = $( "#game-container #button-nr" );
  var $ddCheckbox = $( "#game-container #dd-checkbox" );
  var $resetLink = $( "#game-container #reset-link" );
  var $cancelLink = $( "#game-container #cancel-link" );

  var $overlayCat = $( "#game-container #overlay-cat" );
  var $overlayValue = $( "#game-container #overlay-value" );

  var $roundOneLink = $( "#game-container #round-one-link" );
  var $roundTwoLink = $( "#game-container #round-two-link" );
  var $finalRoundLink = $( "#game-container #final-round-link" );

  var $deleteGameLink = $( "#game-container #delete-game-link" );

  $( "#game-container .clue-box" ).on( "click", function( event ) {
    $currentClue = $( this );
    setClueValue();
    showOverlay( event );

    var multiplier;
    switch ( $currentClue.data( "boxstate" ) ) {
      case "right":
        multiplier = 1;
        break;
      case "wrong":
        multiplier = -1;
        break;
      default:
        multiplier = 0;
    }
    scoreWithoutClue = score - ( clueValue * multiplier );
  });

  $buttonRight.on( "click", function() {
    score = scoreWithoutClue + clueValue;
    resolveClue( "&#x2713;", "right", false, 3, true );
  });

  $buttonPass.on( "click", function() {
    score = scoreWithoutClue;
    resolveClue( "&#x2022;", "pass", false, 2, true );
  });

  $buttonWrong.on( "click", function() {
    if ( ddCheckboxState() ) {
      score = scoreWithoutClue;
      resolveClue( "&#x2022;", "pass", false, 5, false );
    } else {
      score = scoreWithoutClue - clueValue;
      resolveClue( "&#x2718;", "wrong", false, 1, false );
    }
  });

  $buttonNR.on( "click", function() {
    score = scoreWithoutClue;
    $ddCheckbox.prop( "checked", false );
    resolveClue( "", "nr", false, 4, false );
  });

  $resetLink.on( "click", function() {
    score = scoreWithoutClue;
    $ddCheckbox.prop( "checked", false );
    resolveClue( "$" + clueValue, "active", true, 0, false );
  });

  $cancelLink.on( "click", function() {
    hideOverlay();
  });

  $buttonFJRight.on( "click", function() {
    if ( currentGame["final"]["result"] !== 3 ) {
      currentGame["final"]["result"] = 3;
      updateCookies();
      updateFinalSymbol();
    }
  });

  $buttonFJWrong.on( "click", function() {
    if ( currentGame["final"]["result"] !== 1 ) {
      currentGame["final"]["result"] = 1;
      updateCookies();
      updateFinalSymbol();
    }
  });

  $contestantsRight.on( "change", function() {
    currentGame["final"]["contestants_right"] = $( this ).val();
    updateCookies();
  });

  $contestantsWrong.on( "change", function() {
    currentGame["final"]["contestants_wrong"] = $( this ).val();
    updateCookies();
  });

  $roundOneLink.on( "click", function() {
    currentGameData["activeRound"] = "round_one_categories";
    updateRound();
  });

  $roundTwoLink.on( "click", function() {
    currentGameData["activeRound"] = "round_two_categories";
    updateRound();
  });

  $finalRoundLink.on( "click", function() {
    currentGameData["activeRound"] = "final";
    updateRound();
  });

  $deleteGameLink.on( "click", function() {
    currentGame = newCookie();
    currentGameData = newDataCookie();
    updateRound();
  });


  // Here to bottom: category title and topic entry.
  var oldValue;

  $( "#game-container .cat-title, #final-cat-title" ).on( "click",
    function() {
      $( this ).find( "p" ).focus();
    }
  );

  $( "#game-container .cat-title p, #final-cat-title p" ).on( "focus",
    function() {
      var $e = $( this );
      if ( $e.html().trim() === $e.data( "defaultvalue" ) ) {
        $e.html( "" );
      }
      oldValue = $e.html();
      // $e has class "click-resistant" if it is just gaining focus.
      // It does not if it is clicked while already having focus.
      if ( $e.hasClass( "click-resistant" ) ) {
        // TODO: Choose which of these is more desirable behavior.
        // placeCaretAtEnd( $e.get(0) );
        $e.selectText();
      }
      $e.toggleClass( "default-cat click-resistant", false );
    }
  );

  $( "#game-container .cat-title p, #final-cat-title p" ).on( "blur",
    function() {
      var $e = $( this );
      var content;
      if ( $e.html().replace( /&nbsp;/gi, "" )
          .replace( /<br>/gi, "" ).trim() === "" ) {
        $e.toggleClass( "default-cat", true );
        $e.html( $e.data( "defaultvalue" ) );
        content = "";
      } else {
        $e.toggleClass( "default-cat", false) ;
        content = $e.html();
      }
      $e.toggleClass( "click-resistant", true);
      if ( $e.hasClass( "final-cat" ) ) {
        currentGame["final"]["category_title"] = content;
      } else {
        var cat = parseInt( $e.data( "column" ), 10) - 1;
        currentGame[currentRound][cat]["title"] = content;
      }
      if ( content !== oldValue ) { currentGameData["modified"] = true; }
      setCookie( "game", currentGame );
      setCookie( "gameData", currentGameData );
    }
  );

  $( "#game-container .topic-area, #final-topic-area" ).on( "focus",
    function() {
      oldValue = $( this ).val();
    }
  );

  $( "#game-container .topic-area, #final-topic-area" ).on ("blur",
    function() {
      var $e = $( this );
      if ( currentRound === "final" ) {
        currentGame["final"]["topics_string"] = $e.val();
      } else {
        currentGame[currentRound][$e.data( "column" ) - 1]["topics_string"] =
          $e.val();
      }
      currentGameData["modified"] = ( $e.val() !== oldValue );
      setCookie( "game", currentGame );
      setCookie( "gameData", currentGameData );
    }
  );

  currentGameData = {
    "modified":false,
    "activeRound":"round_one_categories"
  };
  setCookie( "gameData", currentGameData );

  if ( !currentGame ) {
    currentGame = newCookie();
    setCookie( "game", currentGame );
  }

  if ( $( ".data-passer" ).data( "whichpage" ) === 'Edit' ) {
    // setCookieFromForm();
    // TODO: Grab cookie from game JSON.
    alert( "Game editing not yet implemented." );
  }

  getScoreFromCookie();
  populateBoard();

});
