// from accepted answer to stackoverflow.com/questions/4233265/
function placeCaretAtEnd(el) {
  if (typeof window.getSelection != "undefined" &&
      typeof document.createRange != "undefined") {
    var range = document.createRange();
    range.selectNodeContents(el);
    range.collapse(false);
    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  } else if (typeof document.body.createTextRange != "undefined") {
    var textRange = document.body.createTextRange();
    textRange.moveToElementText(el);
    textRange.collapse(false);
    textRange.select();
  }
}

// from accepted answer to stackoverflow.com/questions/12243898/
jQuery.fn.selectText = function(){
  var doc = document;
  var element = this[0];
  // console.log(this, element);
  if (doc.body.createTextRange) {
    var range = document.body.createTextRange();
    range.moveToElementText(element);
    range.select();
  } else if (window.getSelection) {
    var selection = window.getSelection();
    var range = document.createRange();
    range.selectNodeContents(element);
    selection.removeAllRanges();
    selection.addRange(range);
  }
};

function setCookie( name, value ) {
  Cookies.set( name, value, { expires: 7305, path: '',
                              secure: <%= Rails.env.production? %> } );
}

function getCookie( name ) {
  return Cookies.getJSON( name );
}

function destroyCookie( name ) {
  Cookies.remove( name, { path: '', secure: <%= Rails.env.production? %> } );
}

const NEW_GAME_COOKIE = {
  modified: false,
  showdate: "",
  activeRound: "round1",
  round1: [
    0,
    // [ [ title, topics ], result codes top to bottom ]
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ]
  ],
  round2: [
    0,
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ],
    [ [ "", "" ], 0, 0, 0, 0, 0 ]
  ],
  // [ [ category_title, topics ], result code, contestants: [ right, wrong ] ]
  fj: [ [ "", "" ], 0, [ 0, 0 ] ]
};


$(function() {

  function updateCookie( changed ) {
    if ( changed === undefined ) { changed = true; }

    if ( changed ) { currentGame["modified"] = true; }
    setCookie( "game", currentGame);
  }

  function updateScoreboard() {
    scoreString = Math.abs( score ).toLocaleString( "en-US" );
    if ( score < 0 ) {
      $scoreboard.html( "-$" + scoreString );
      $scoreboard.toggleClass( "score-positive", false );
      $scoreboard.toggleClass( "score-negative", true );
    } else {
      $scoreboard.html( "$" + scoreString );
      $scoreboard.toggleClass( "score-negative", false );
      $scoreboard.toggleClass( "score-positive", true );
    }
  }

  function showOverlay( event ) {
    vanishPoint = [ event.offsetY + event.target.offsetTop,
                    event.offsetX + event.target.offsetLeft ];

    $clue.show( "scale", { origin: vanishPoint }, 200 );
    $clue.css( "display", "flex" );

    var titleClass = "#cat-title-" + $currentClue.data( "column" ) + " p";
    var catName = $( titleClass ).html().replace( /<div>/gi, " " )
                                        .replace( /<\/div>/gi, "" ).trim();
    if ( catName.length > 20 ) {
      catName = catName.slice( 0, 15 ) + "...";
    }
    $overlayCat.html( catName );
    $overlayValue.html( "$" + clueValue);

    $ddCheckbox.prop( "checked", $currentClue.data( "isdd" ) );
  }

  function hideOverlay() {
    $clue.hide( "scale", { origin: vanishPoint }, 200 );
  }

  function setTopRowValue( round ) {
    if ( round === 1 || round === "round1" ) {
      topRowValue = 200;
    } else if ( round === 2 || round === "round2" ) {
      topRowValue = 400;
    } else {
      console.log( "Error: could not set top row value for round " + round );
      topRowValue = 0;
    }
  }

  function setClueValue() {
    clueValue = topRowValue * $currentClue.data( "row" );
  }

  function resolveClue( html, boxstate, boxActive, statusCode, addDD ) {
    hideOverlay();
    updateScoreboard();
    $currentClue.html( "<span>" + html + "</span>" );
    var col = $currentClue.data( "column" );
    var row = $currentClue.data( "row" );
    currentClueState = currentGame[currentRound][col][row];
    $currentClue.data( "boxstate", boxstate );
    $currentClue.toggleClass( "active-clue-box", boxActive );
    setDD( ddCheckboxState() );
    if ( addDD && ddCheckboxState() ) { statusCode += 4; }
    currentGame[currentRound][col][row] = statusCode;
    updateCookie( currentClueState !== statusCode );
  }

  function setDD( bool ) {
    $currentClue.toggleClass( "dd-box", bool );
    $currentClue.data( "isdd", bool );
  }

  function ddCheckboxState() {
    return $ddCheckbox.prop( "checked" );
  }

  function getScoreFromCookie() {
    score = 0;
    var rounds = [ "round1", "round2" ];
    for ( var i = 0; i < 2; i++ ) {
      var roundObject = currentGame[rounds[i]];
      setTopRowValue( i + 1 );

      for ( var col = 1; col <= 6; col++ ) {
        for ( var row = 1; row <= 5; row++ ) {
          // $currentClue = $( "#clue-box-" + col + "-" + row );
          // setClueValue();
          clueValue = topRowValue * row;
          switch ( roundObject[col][row] ) {
            case 1:  // regular clue wrong - DDs don't deduct.
              score -= clueValue;
              break;
            case 3:  // right
            case 7:  // DDright
              score += clueValue;
              break;
            // None of the others changes the score.
          }
        }
      }
    }
    updateScoreboard();
  }

  function populateBoard() {
    var unadjustedScore = score;
    currentRound = currentGame["activeRound"];

    if ( currentRound === "round1" || currentRound === "round2" ) {
      setTopRowValue( currentRound );
      var roundObject = currentGame[currentRound];

      for ( var col = 1; col <= 6; col++ ) {
        var catTitleText = roundObject[col][0][0];
        var $catTitleP = $( "#cat-title-" + col + " p" );
        $catTitleP.html( catTitleText );
        // Applies appropriate formatting.
        oldValue = catTitleText;
        $catTitleP.blur();

        $( "#topic-area-" + col ).val( roundObject[col][0][1] );

        for ( var row = 1; row <= 5; row++ ) {
          $currentClue = $( "#clue-box-" + col + "-" + row );
          setClueValue();

          var boxStatus = roundObject[col][row];
          scoreWithoutClue = unadjustedScore;

          if ( boxStatus < 0 || boxStatus > 7 ) {
            alert( "Error reading from cookie - invalid box status" );
            score = -99999;
            $scoreboard.html( "error" );
            return false;
          }
          if ( boxStatus > 4 ) {
            $ddCheckbox.prop( "checked", true );
            boxStatus -= 4;  // Change DD status to its regular counterpart.
          } else {
            $ddCheckbox.prop( "checked", false );
          }
          switch ( boxStatus ) {
            case 0:  // active
              $resetLink.trigger( "click" );
              break;
            case 1:  // wrong
              $buttonWrong.trigger( "click" );
              break;
            case 2:  // pass
              $buttonPass.trigger( "click" );
              break;
            case 3:  // right
              $buttonRight.trigger( "click" );
              break;
            default:  // nr
              $buttonNR.trigger( "click" );
              break;
          }
        }
      }
    } else {  // Final is current round.
      var catTitleText = currentGame["fj"][0][0];
      var $catTitleP = $( "#final-cat-title p" )
      $catTitleP.html( catTitleText );
      oldValue = catTitleText;
      $catTitleP.blur();

      $( "#final-topic-area" ).val( currentGame["fj"][0][1] );
      $contestantsRight.val( currentGame["fj"][2][0] );
      $contestantsWrong.val( currentGame["fj"][2][1] );
    }
    score = unadjustedScore;
    updateScoreboard();
  }

  function updateRound() {
    currentGame["activeRound"] = currentRound;
    setCookie( "game", currentGame );
    getScoreFromCookie();
    if ( currentRound === "final" ) {
      $fj.show( "scale", 200, function() {
        $board.css( 'visibility', 'hidden' );
      });
      $fj.css( 'display', 'flex' );
    } else {
      $fj.hide( "scale", 200 );
      $board.css( 'visibility', 'visible');
    }
    populateBoard();
  }


  var score = 0;
  var $scoreboard = $( "#game-container #score" );
  updateScoreboard();

  var currentGame = getCookie( "game" );
  if ( !currentGame ) {
    currentGame = NEW_GAME_COOKIE;
    setCookie( "game", currentGame );
  }
  var currentRound;

  var $board = $( "#game-container #board" );

  var $clue = $( "#game-container #clue-over-board" );
  var vanishPoint;  // Where overlay comes from/goes to.

  var $fj = $( "#game-container #final-over-board" );
  var $buttonFJRight = $( "#game-container #button-final-right" );
  var $buttonFJWrong = $( "#game-container #button-final-wrong" );
  var $contestantsRight = $( "#game-container #final-right-number" );
  var $contestantsWrong = $( "#game-container #final-wrong-number" );

  var topRowValue;
  var $currentClue;
  var currentClueState;
  var clueValue;
  var scoreWithoutClue;

  var $buttonRight = $( "#game-container #button-right" );
  var $buttonPass = $( "#game-container #button-pass" );
  var $buttonWrong = $( "#game-container #button-wrong" );
  var $buttonNR = $( "#game-container #button-nr" );
  var $ddCheckbox = $( "#game-container #dd-checkbox" );
  var $resetLink = $( "#game-container #reset-link" );
  var $cancelLink = $( "#game-container #cancel-link" );

  var $overlayCat = $( "#game-container #overlay-cat" );
  var $overlayValue = $( "#game-container #overlay-value" );

  var $roundOneLink = $( "#game-container #round-one-link" );
  var $roundTwoLink = $( "#game-container #round-two-link" );
  var $finalRoundLink = $( "#game-container #final-round-link" );

  var $deleteGameLink = $( "#game-container #delete-game-link" );

  $( "#game-container .clue-box" ).on( "click", function( event ) {
    $currentClue = $( this );
    setClueValue();
    showOverlay( event );

    var multiplier;
    switch ( $currentClue.data( "boxstate" ) ) {
      case "right":
        multiplier = 1;
        break;
      case "wrong":
        multiplier = -1;
        break;
      default:
        multiplier = 0;
    }
    scoreWithoutClue = score - ( clueValue * multiplier );
  });

  $buttonRight.on( "click", function() {
    score = scoreWithoutClue + clueValue;
    resolveClue( "&#x2713;", "right", false, 3, true );
  });

  $buttonPass.on( "click", function() {
    score = scoreWithoutClue;
    resolveClue( "&#x2022;", "pass", false, 2, true );
  });

  $buttonWrong.on( "click", function() {
    if ( ddCheckboxState() ) {
      score = scoreWithoutClue;
      resolveClue( "&#x2022;", "pass", false, 5, false );
    } else {
      score = scoreWithoutClue - clueValue;
      resolveClue( "&#x2718;", "wrong", false, 1, false );
    }
  });

  $buttonNR.on( "click", function() {
    score = scoreWithoutClue;
    $ddCheckbox.prop( "checked", false );
    resolveClue( "", "nr", false, 4, false );
  });

  $resetLink.on( "click", function() {
    score = scoreWithoutClue;
    $ddCheckbox.prop( "checked", false );
    resolveClue( "$" + clueValue, "active", true, 0, false );
  });

  $cancelLink.on( "click", function() {
    hideOverlay();
  });

  $buttonFJRight.on( "click", function() {
    if ( currentGame["fj"][1] !== 3 ) {
      currentGame["fj"][1] = 3;
      updateCookie();
    }
  });

  $buttonFJWrong.on( "click", function() {
    if ( currentGame["fj"][1] !== 1 ) {
      currentGame["fj"][1] = 1;
      updateCookie();
    }
  });

  $contestantsRight.on( "change", function() {
    currentGame["fj"][2][0] = $( this ).val();
    updateCookie();
  });

  $contestantsWrong.on( "change", function() {
    currentGame["fj"][2][1] = $( this ).val();
    updateCookie();
  });

  $roundOneLink.on( "click", function() {
    currentRound = "round1";
    updateRound();
  });

  $roundTwoLink.on( "click", function() {
    currentRound = "round2";
    updateRound();
  });

  $finalRoundLink.on( "click", function() {
    currentRound = "final";
    updateRound();
  });

  $deleteGameLink.on( "click", function() {
    currentGame = NEW_GAME_COOKIE;
    setCookie( "game", currentGame );
    score = 0;
    updateScoreboard();
    updateRound();
  });


  // Here to bottom: category title and topic entry.
  var oldValue;

  $( "#game-container .cat-title, #final-cat-title" ).on( "click",
    function() {
      $( this ).find( "p" ).focus();
    }
  );

  $( "#game-container .cat-title p, #final-cat-title p" ).on( "focus",
    function() {
      var $elem = $( this );
      if ( $elem.html().trim() === $elem.data( "defaultvalue" ) ) {
        $elem.html( "" );
      }
      oldValue = $elem.html();
      // $elem has class "click-resistant" if it is just gaining focus.
      // It does not if it is clicked while already having focus.
      if ( $elem.hasClass( "click-resistant" ) ) {
        // TODO: Choose which of these is more desirable behavior.
        // placeCaretAtEnd( $elem.get(0) );
        $elem.selectText();
      }
      $elem.toggleClass( "default-cat click-resistant", false );
    }
  );

  $( "#game-container .cat-title p, #final-cat-title p" ).on( "blur",
    function() {
      var $elem = $( this );
      var content;
      if ( $elem.html().replace( /&nbsp;/gi, "" )
          .replace( /<br>/gi, "" ).trim() === "" ) {
        $elem.toggleClass( "default-cat", true );
        $elem.html( $elem.data( "defaultvalue" ) );
        content = "";
      } else {
        $elem.toggleClass( "default-cat", false) ;
        content = $elem.html();
      }
      $elem.toggleClass( "click-resistant", true);
      if ( currentRound === "final" ) {
        currentGame["fj"][0][0] = content;
      } else {
        currentGame[currentRound][$elem.data( "column" )][0][0] = content;
      }
      if ( content !== oldValue ) { currentGame["modified"] = true; }
      setCookie( "game", currentGame );
    }
  );

  $( "#game-container .topic-area, #final-topic-area" ).on( "focus",
    function() {
      oldValue = $( this ).val();
    }
  );

  $( "#game-container .topic-area, #final-topic-area" ).on ("blur",
    function() {
      var $elem = $( this );
      if ( currentRound === "final" ) {
        currentGame["fj"][0][1] = $elem.val();
      } else {
        currentGame[currentRound][$elem.data( "column" )][0][1] = $elem.val();
      }
      currentGame["modified"] = ( $elem.val() !== oldValue );
      setCookie( "game", currentGame );
    }
  );

  getScoreFromCookie();
  populateBoard();

});
