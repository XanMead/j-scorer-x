// var jBlue   = "#151e8c";  // Also defined in master.css.scss
// var jYellow = "#cf9f3e";  // Ditto

// from accepted answer to stackoverflow.com/questions/4233265/
function placeCaretAtEnd(el) {
  if (typeof window.getSelection != "undefined" &&
      typeof document.createRange != "undefined") {
    var range = document.createRange();
    range.selectNodeContents(el);
    range.collapse(false);
    var sel = window.getSelection();
    sel.removeAllRanges();
    sel.addRange(range);
  } else if (typeof document.body.createTextRange != "undefined") {
    var textRange = document.body.createTextRange();
    textRange.moveToElementText(el);
    textRange.collapse(false);
    textRange.select();
  }
}

// from accepted answer to stackoverflow.com/questions/12243898/
jQuery.fn.selectText = function(){
  var doc = document;
  var element = this[0];
  // console.log(this, element);
  if (doc.body.createTextRange) {
    var range = document.body.createTextRange();
    range.moveToElementText(element);
    range.select();
  } else if (window.getSelection) {
    var selection = window.getSelection();
    var range = document.createRange();
    range.selectNodeContents(element);
    selection.removeAllRanges();
    selection.addRange(range);
  }
};


$(function() {

  function updateScoreboard() {
    scoreString = Math.abs( score ).toLocaleString( 'en-US' );
    if ( score < 0 ) {
      $scoreboard.html( "-$" + scoreString );
      $scoreboard.toggleClass( "score-positive", false );
      $scoreboard.toggleClass( "score-negative", true );
    } else {
      $scoreboard.html( "$" + scoreString );
      $scoreboard.toggleClass( "score-negative", false );
      $scoreboard.toggleClass( "score-positive", true );
    }
  }

  function showOverlay() {
    vanishPoint = [ event.offsetY + event.target.offsetTop,
                    event.offsetX + event.target.offsetLeft ];

    $clue.show( "scale", { origin: vanishPoint }, 200 );
    $clue.css( "display", "flex" );

    var titleClass = "#cat-title-" + $currentClue.data( "column" ) + " p";
    var catName = $( titleClass ).html().replace( /<div>/gi, " " )
                                        .replace( /<\/div>/gi, "" ).trim();
    if ( catName.length > 20 ) {
      catName = catName.slice( 0, 15 ) + "...";
    }
    $( "#overlay-cat" ).html( catName );
    $( "#overlay-value" ).html( "$" + clueValue);

    $( "#game-container #dd-checkbox" ).prop( "checked",
        $currentClue.data( "isdd" ) );
  }

  function hideOverlay() {
    $clue.hide( "scale", { origin: vanishPoint }, 200 );
  }

  function resolveClue() {
    hideOverlay();
    updateScoreboard();
    $currentClue.toggleClass( "active-clue-box", false );
    setDD( ddCheckboxState() );
  }

  function setDD( bool ) {
    $currentClue.toggleClass( "dd-box", bool );
    $currentClue.data( "isdd", bool );
  }

  function ddCheckboxState() {
    return $( "#game-container #dd-checkbox" ).prop( "checked" );
  }


  var score = 0;
  var $scoreboard = $( "#game-container #score" );
  updateScoreboard();

  var $clue = $( "#game-container #clue-over-board" );
  var vanishPoint;  // Where overlay comes from/goes to.

  var $currentClue;
  var clueValue;
  var scoreWithoutClue;

  $( "#game-container .clue-box" ).on( "click", function( event ) {
    $currentClue = $( this );
    clueValue = $currentClue.data( "rowvalue" );
    showOverlay();

    var multiplier;
    switch ( $currentClue.data( "boxstate" ) ) {
      case "right":
        multiplier = 1;
        break;
      case "wrong":
        multiplier = -1;
        break;
      default:
        multiplier = 0;
    }
    scoreWithoutClue = score - ( clueValue * multiplier );
  });

  $( "#game-container #button-right" ).on( "click", function() {
    score = scoreWithoutClue + clueValue;
    resolveClue();
    $currentClue.html( "<span>&#x2713;</span>" );  // Check mark
    $currentClue.data( "boxstate", "right" );
  });

  $( "#game-container #button-pass" ).on( "click", function() {
    score = scoreWithoutClue;
    resolveClue();
    $currentClue.html( "<span>&#x2022;</span>" ); // Bullet point
    $currentClue.data( "boxstate", "pass" );
  });

  $( "#game-container #button-wrong" ).on( "click", function() {
    score = scoreWithoutClue - clueValue;
    resolveClue();
    $currentClue.html( "<span>&#x2718;</span>" );  // X symbol
    $currentClue.data( "boxstate", "wrong" );
  });

  $( "#game-container #nr-button" ).on( "click", function() {
    score = scoreWithoutClue;
    $( "#game-container #dd-checkbox" ).prop( "checked", false);
    resolveClue();
    $currentClue.html( "<span></span>" );
    $currentClue.data( "boxstate", "nr" );
  });

  $( "#game-container #reset-link" ).on( "click", function() {
    hideOverlay();
    score = scoreWithoutClue;
    updateScoreboard();
    setDD( false );
    $currentClue.html( "<span>$" + clueValue + "</span>");
    $currentClue.toggleClass( "active-clue-box", true );
    $currentClue.data( "boxstate", "active" );
  });

  $( "#game-container #cancel-link" ).on( "click", function() {
    hideOverlay();
  });


  // Here to bottom: category title and topic entry.
  $( "#game-container .cat-title" ).on( "click", function( event ) {
    $( this ).find( "p" ).focus();
  });

  $( "#game-container .cat-title p" ).on( "focus", function() {
    var $elem = $( this );
    if ( $elem.html().trim() === $elem.data( "defaultvalue" ) ) {
      $elem.html( "" );
    }
    if ( $elem.hasClass( "click-resistant" ) ) {
      // placeCaretAtEnd( $elem.get(0) );
      $elem.selectText();
    }
    $elem.toggleClass( "default-cat click-resistant", false );
  });

  $( "#game-container .cat-title p" ).on( "blur", function() {
    var $elem = $( this );
    if ( $elem.html().replace( /&nbsp;/gi, "" )
        .replace( /<br>/gi, "" ).trim() === "" ) {
      $elem.toggleClass( "default-cat", true );
      $elem.html( $elem.data( "defaultvalue" ) );
    }
    $elem.toggleClass( "click-resistant", true);
  });

});
